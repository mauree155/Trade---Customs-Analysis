# -*- coding: utf-8 -*-
"""03-Feature-engineering-ta1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mJhQKzXNCNs-9voKkkGI9zcAKsKqcSQM

# Feature engineering and statistical Analysis

## 1. Import Libraries
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

""" ## 2. Load Dataset"""

df = pd.read_csv("data/cleaned_Trade&Customs_data.csv")  # load cleaned data


#drop the column thats starts with "Unnamed" for the dataset to look neat
df = df.loc[:, ~df.columns.str.contains("^Unnamed")]

print("Shape:", df.shape)
from IPython.display import display
display(df.head())

"""## 3. Feature Creation (Helper Columns)

#### Convert Receipt_date to datetime
"""

df["Receipt_date"] = pd.to_datetime(df["Receipt_date"], errors="coerce")

"""#### Tax-to-CIF Ratio"""

df["Tax_to_CIF_Ratio"] = df["Total_Tax($)"] / df["CIF_value($)"]

"""#### Average values per transaction (row = transaction)"""

df["Value_per_Transaction"] = df["CIF_value($)"]  # row-level, avg will be computed later
df["Mass_per_Transaction"] = df["Mass_(kg)"]
df["Tax_per_Transaction"] = df["Total_Tax($)"]

"""## 4. Timeliness of Tax Payments (Assumption: due within 7 days of registration)

#### Here we assume a dummy reg date = receipt - random lag
"""

df["Reg_date"] = df["Receipt_date"] - pd.to_timedelta(np.random.randint(0, 10, size=len(df)), unit="D")

"""#### Assuming Due date = 7 days after registration"""

df["Due_date"] = df["Reg_date"] + pd.Timedelta(days=7)

"""####  On-time or not"""

df["On_Time"] = df["Receipt_date"] <= df["Due_date"]

"""#### Payment delay in days"""

df["Payment_Delay_Days"] = (df["Receipt_date"] - df["Reg_date"]).dt.days

"""## 5. KPI Summaries

#### Import KPIs
"""
total_fob = df["FOB_value($)"].sum()
total_cif = df["CIF_value($)"].sum()
avg_import_value = df["CIF_value($)"].mean()
avg_mass = df["Mass_(kg)"].mean()

"""#### Tax KPIs"""

total_tax = df["Total_Tax($)"].sum()
avg_tax = df["Total_Tax($)"].mean()

"""#### Logistics KPIs"""

total_shipments = df["Reg_number"].nunique()
common_container = df["Container_size"].mode()[0]

"""#### Compliance KPIs"""

transactions_per_office = df["Custom_office"].value_counts()
frequent_hs = df["HS_code"].value_counts()

"""## 6. Grouped Tables

#### Top countries by value
"""

top_countries = df.groupby("Country_of_origin")["CIF_value($)"].sum().reset_index().sort_values(by="CIF_value($)", ascending=False)

"""#### Top importers by volume"""

top_importers_volume = df.groupby("Importer")["Mass_(kg)"].sum().reset_index().sort_values(by="Mass_(kg)", ascending=False)

"""#### Top tax-contributing importers"""

top_tax_importers = df.groupby("Importer")["Total_Tax($)"].sum().reset_index().sort_values(by="Total_Tax($)", ascending=False)

"""#### Total weight by country"""

weight_by_country = df.groupby("Country_of_origin")["Mass_(kg)"].sum().reset_index().sort_values(by="Mass_(kg)", ascending=False)

"""## 7. Correlation & Seasonality

#### Correlation matrix
"""

corr = df[["FOB_value($)", "CIF_value($)", "Total_Tax($)"]].corr()
print("\nCorrelation Matrix:\n", corr)

# heatmap to visualize correlation matrix
sns.heatmap(corr, annot=True, cmap="coolwarm")
plt.title("Correlation between Trade Values and Tax")
plt.show()

"""#### Seasonality (monthly trend)

"""

df["Year"] = df["Receipt_date"].dt.year
df["Month"] = df["Receipt_date"].dt.month
monthly_trend = df.groupby(["Year","Month"])["CIF_value($)"].sum().reset_index()

# lineplot to visualize monthly trend
plt.figure(figsize=(12,6))
sns.lineplot(x="Month", y="CIF_value($)", hue="Year", data=monthly_trend, marker="o", palette="viridis")
plt.title("Monthly Trade Volumes Over Years")
plt.xlabel("Month")
plt.ylabel("Total CIF Value")
plt.show()

"""## 8. Save Outputs

#### Main KPI-ready dataset
"""

df.to_csv(r"C:\Users\HP\Desktop\Trade&Customs-ta1-project\data\feature-engineered-data.csv", index=False)

"""#### Grouped summaries (for Power BI joins)"""

top_countries.to_csv(r"C:\Users\HP\Desktop\Trade&Customs-ta1-project\data\kpi_top_countries.csv", index=False)
top_importers_volume.to_csv(r"C:\Users\HP\Desktop\Trade&Customs-ta1-project\data\kpi_top_importers_volume.csv", index=False)
top_tax_importers.to_csv(r"C:\Users\HP\Desktop\Trade&Customs-ta1-project\data\kpi_top_tax_importers.csv", index=False)
weight_by_country.to_csv(r"C:\Users\HP\Desktop\Trade&Customs-ta1-project\data\kpi_weight_by_country.csv", index=False)

print("\nKPI data and summary tables saved successfully!")

