# -*- coding: utf-8 -*-
"""02-EDA-ta1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fSUZ-SGyo99MVRFv7BNksE-4QJ2CmF5L#scrollTo=GgMENbDZXOp3

# Exploratory Data Analysis

#### Import Libraries
"""

import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""#### settings"""

pd.set_option("display.max_columns", None)
sns.set(style="whitegrid")

"""#### Load Dataset"""
df = pd.read_csv("data/cleaned_Trade&Customs_data.csv")  # load cleaned data


#drop the column thats starts with "Unnamed" for the dataset to look neat
df = df.loc[:, ~df.columns.str.contains("^Unnamed")]

"""### Inspect data"""

print("Shape:", df.shape)
print(df.info())
from IPython.display import display
display(df.head())

"""#### Summary Statistics"""

display(df.describe(include="all"))

"""#### Missing Values Check"""

print("Missing values per column:")
print(df.isna().sum())

"""#### Convert certian columns to categorical data"""

df[["Importer", "HS_code", "Year","Chapter"]] = df[["Importer", "HS_code", "Year","Chapter"]].astype(str)

df.info()

"""#### Univariate Analysis : Numeric distributions"""

num_cols = df.select_dtypes(include=[np.number]).columns
for col in num_cols:
    plt.figure(figsize=(6,3))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f"Distribution of {col}")
    plt.show()

"""#### Correlation Analysis"""

plt.figure(figsize=(10,6))
sns.heatmap(df[num_cols].corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

""" #### Categorical Analysis"""

top_n = 5  # adjust as needed
cat_cols = df.select_dtypes(include=["object", "category"]).columns  # define categorical columns
for col in cat_cols:
    counts = df[col].value_counts().nlargest(top_n)
    plt.figure(figsize=(6,3))
    sns.barplot(x=counts.values, y=counts.index)
    plt.title(f"Top {top_n} {col}")
    plt.xticks(rotation=360)
    plt.show()

"""#### Top 10 HS codes by frequency"""

hs_counts = df["section_name"].value_counts().head(10)
plt.figure(figsize=(8,4))
sns.barplot(x=hs_counts.values, y=hs_counts.index)
plt.title("Top 10 Section Name by Frequency")
plt.xlabel("Count")
plt.ylabel("section name")
plt.xticks(rotation=360)
plt.show()

"""#### Average CIF Value by HS Code"""

hs_cif = df.groupby("HS_code")["CIF_value($)"].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,4))
sns.barplot(x=hs_cif.values, y=hs_cif.index)
plt.title("Top 10 HS Codes by Avg CIF Value")
plt.xlabel("Avg CIF Value")
plt.ylabel("HS Code")
plt.xticks(rotation=360)
plt.show()

"""#### Average Mass by HS Code"""

mass_avg = df.groupby("HS_code")["Mass_(kg)"].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,4))
sns.barplot(x=mass_avg.values, y=mass_avg.index)
plt.title("Top 10 HS Codes by Avg Mass")
plt.xlabel("Average Mass (KG)")
plt.ylabel("HS Code")
plt.xticks(rotation=360)
plt.show()

"""### CIF vs Mass scatterplot"""

plt.figure(figsize=(6,4))
sns.scatterplot(x="Mass_(kg)", y="CIF_value($)", data=df, alpha=0.6)
plt.title("CIF Value vs Mass (KG)")
plt.show()

"""### Top countries by total CIF value

"""

country_cif = df.groupby("Country_of_origin")["CIF_value($)"].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,6))
sns.barplot(y=country_cif.index, x=country_cif.values, palette="viridis")  # horizontal: y=categories, x=values
plt.title("Top 10 Import Countries by CIF Value")
plt.xlabel("Total CIF Value")
plt.ylabel("Country")
plt.show()

"""### Avg Tax-to-CIF ratio per HS Code"""

# Calculate the Tax-to-CIF Ratio
df["Tax_to_CIF_Ratio"] = df["Total_Tax($)"] / df["CIF_value($)"]

tax_ratio = df.groupby("HS_code")["Tax_to_CIF_Ratio"].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,4))
sns.barplot(x=tax_ratio.values, y=tax_ratio.index)
plt.title("Top 10 HS Codes by Avg Tax-to-CIF Ratio")
plt.xlabel("Avg Tax/CIF Ratio")
plt.ylabel("HS Code")
plt.xticks(rotation=360)
plt.show()

df.to_csv(r"C:\Users\HP\Desktop\Trade&Customs-ta1-project\data\eda_data.csv", index=False)
